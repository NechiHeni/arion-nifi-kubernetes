---

replicaCount: 3


image:
  repository: yahiachames/arion-nifi
  tag: "1.26.0"
  pullPolicy: "IfNotPresent"

securityContext:
  runAsUser: 1000
  fsGroup: 1000
sts:

  podManagementPolicy: Parallel
  AntiAffinity: soft
  useHostNetwork: null
  hostPort: null
  pod:
    annotations:
      security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000

  serviceAccount:
    create: false

    annotations: {}
  hostAliases: []

  startupProbe:
    enabled: false
    failureThreshold: 60
    periodSeconds: 10


properties:
  
  sensitiveKey: changeMechangeMe 

  algorithm: NIFI_PBKDF2_AES_GCM_256
  # use externalSecure for when inbound SSL is provided by nginx-ingress or other external mechanism
  externalSecure: false
  isNode: false
  httpsPort: 8443
  webProxyHost: 52.186.100.29:8443
  clusterPort: 6007
  zkClientEnsembleTraker: false # https://issues.apache.org/jira/browse/NIFI-10481
  clusterNodeConnectionTimeout: "5 sec"
  clusterNodeReadTimeout: "5 sec"
  zookeeperConnectTimeout: "3 secs"
  zookeeperSessionTimeout: "3 secs"
  archiveMaxRetentionPeriod: "3 days"
  archiveMaxUsagePercentage: "85%"
  provenanceStorage: "8 GB"
  provenanceMaxStorageTime: "10 days"
  flowArchiveMaxTime: "30 days"
  flowArchiveMaxStorage: "500 MB"
  siteToSite:
    port: 10000
  # use properties.safetyValve to pass explicit 'key: value' pairs that overwrite other configuration
  safetyValve:
    #nifi.variable.registry.properties: "${NIFI_HOME}/example1.properties, ${NIFI_HOME}/example2.properties"
    nifi.web.http.network.interface.default: eth0
    # listen to loopback interface so "kubectl port-forward ..." works
    nifi.web.http.network.interface.lo: lo

 
postStart: /opt/nifi/psql; wget -P /opt/nifi/psql https://jdbc.postgresql.org/download/postgresql-42.2.6.jar

# Nifi User Authentication
auth:
  admin: CN=admin, OU=NIFI
  SSL:
    keystorePasswd: changeMe
    truststorePasswd: changeMe

  # Automaticaly disabled if OIDC or LDAP enabled
  singleUser:
    username: arionnifi
    password: arionairflowarionairflow 
  clientAuth:
    enabled: false
  oidc:
    enabled: false
    discoveryUrl: #http://<oidc_provider_address>:<oidc_provider_port>/auth/realms/<client_realm>/.well-known/openid-configuration
    clientId: #<client_name_in_oidc_provider>
    clientSecret: #<client_secret_in_oidc_provider>
    claimIdentifyingUser: email
    admin: nifi@example.com
    preferredJwsAlgorithm:
    ## Request additional scopes, for example profile
    additionalScopes:

openldap:
  enabled: false
  persistence:
    enabled: true
  env:
    LDAP_ORGANISATION: # name of your organization e.g. "Example"
    LDAP_DOMAIN: # your domain e.g. "ldap.example.be"
    LDAP_BACKEND: "hdb"
    LDAP_TLS: "true"
    LDAP_TLS_ENFORCE: "false"
    LDAP_REMOVE_CONFIG_AFTER_SETUP: "false"
  adminPassword: #ChengeMe
  configPassword: #ChangeMe
  customLdifFiles:
    1-default-users.ldif: |-
      # You can find an example ldif file at https://github.com/cetic/fadi/blob/master/examples/basic/example.ldif

# headless service
headless:
  type: ClusterIP
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"

# ui service
service:
  type: LoadBalancer
  httpsPort: 8443
  # nodePort: 30236
  annotations:
    {}
 
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
    timeoutSeconds: 10800

  # Enables additional port/ports to nifi service for internal processors
  processors:
    enabled: false
    ports:
      - name: processor01
        port: 7001
        targetPort: 7001
        #nodePort: 30701
      - name: processor02
        port: 7002
        targetPort: 7002

containerPorts: []

ingress:
  enabled: false
  # className: nginx
  annotations: {}
  tls: []
  hosts: []
  path: /

jvmMemory: 2g

sidecar:
  image: busybox
  tag: "1.32.0"
  imagePullPolicy: "IfNotPresent"


persistence:
  enabled: true
  accessModes: [ReadWriteOnce]
  subPath:
    enabled: true
    name: data
    size: 30Gi
  ## Storage Capacities for persistent volumes (these are ignored if using one volume with subPath)
  configStorage:
    size: 100Mi
  authconfStorage:
    size: 100Mi
  # Storage capacity for the 'data' directory, which is used to hold things such as the flow.xml.gz, configuration, state, etc.
  dataStorage:
    size: 1Gi
  # Storage capacity for the FlowFile repository
  flowfQileRepoStorage:
    size: 10Gi
  # Storage capacity for the Content repository
  contentRepoStorage:
    size: 10Gi
  # Storage capacity for the Provenance repository. When changing this, one should also change the properties.provenanceStorage value above, also.
  provenanceRepoStorage:
    size: 10Gi
  # Storage capacity for nifi logs
  logStorage:
    size: 5Gi

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  {}

logresources:
  requests:
    cpu: 10m
    memory: 10Mi
  limits:
    cpu: 50m
    memory: 50Mi

ca:
  ## If true, enable the nifi-toolkit certificate authority
  enabled: false
  persistence:
    enabled: true
  server: ""
  service:
    port: 9090
  token: sixteenCharacters
  admin:
    cn: admin
  serviceAccount:
    create: false
    #name: nifi-ca
  openshift:
    scc:
      enabled: false


certManager:
  enabled: false
  clusterDomain: cluster.local
  keystorePasswd: changeme
  truststorePasswd: changeme
  replaceDefaultTrustStore: false
  additionalDnsNames:
    - localhost
  refreshSeconds: 300
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi

  certDuration: 2160h
  caDuration: 87660h

# ------------------------------------------------------------------------------
# Zookeeper:
# ------------------------------------------------------------------------------
zookeeper:
  ## If true, install the Zookeeper chart
  ## ref: https://github.com/bitnami/charts/blob/master/bitnami/zookeeper/values.yaml
  enabled: true
  ## If the Zookeeper Chart is disabled a URL and port are required to connect
  url: ""
  port: 2181
  replicaCount: 3

# ------------------------------------------------------------------------------
# Nifi registry:
# ------------------------------------------------------------------------------
registry:
  ## If true, install the Nifi registry
  enabled: true
  url: ""
  port: 80
  replicaCount: 1
  image:
    repository: apache/nifi-registry
    pullPolicy: Always
    tag: "1.18.0"
  initContainers:
  git:
    image: alpine/git
    tag: v2.26.2
  alpine:
    image: alpine
    tag: "3.6"
  extraEnvs: []
  service:
    type: LoadBalancer
    httpsport: 18080
  ingress:
    enabled: false
    annotations: {}
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
  ## Persist data to a persistent volume
  persistence:
    enabled: true
    database:
      storageClass: "azureblob-fuse-premium"
      accessMode: ReadWriteOnce
      size: 8Gi
    flowStorage:
      storageClass: "azureblob-fuse-premium"
      accessMode: ReadWriteOnce
      size: 8Gi
  resources: {}
  bundleProvider:
    file:
      enabled: true
      storageDirectory: ./extension_bundles
  flowProvider:
    postgres:
      enabled: true
      driverURL: https://jdbc.postgresql.org/download/
      fileName: postgresql-42.2.6.jar
      driverClass: org.postgresql.Driver
      url: jdbc:postgresql://localhost/nifireg
      username: nifireg
      password: nifireg

